name: Generate GitHub Actions Versions JSON

on:
  schedule:
    - cron: "0 0 * * *" # ÊØèÂ§© UTC Êó∂Èó¥ 00:00 ËøêË°å
  workflow_dispatch: # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

env:
  # ‰øùÂ≠òÂú∞ÂùÄ
  JSON_FILE_PATH: ${{ github.workspace }}/actions-versions.json

  # Êï∞ÊçÆ‰∏≠ÂøÉÊñá‰ª∂
  DATA_CENTER_FILE: ${{ github.workspace }}/data.json

  # Âú®Êï∞ÊçÆ‰∏≠ÂøÉÁöÑÊ†áËØÜ
  DATA_CENTER_NAME: actions-versions

  # ÊçïËé∑
  GITHUB_REPOS: '["actions/checkout", "actions/setup-node", "actions/setup-python", "actions/setup-dotnet", "actions/setup-java", "actions/cache", "actions/upload-artifact", "actions/download-artifact", "codecov/codecov-action", "dorny/test-reporter", "super-linter/super-linter", "sonarsource/sonarqube-scan-action", "aquasecurity/trivy-action", "actions/deploy-pages", "JamesIves/github-pages-deploy-action", "docker/login-action", "docker/setup-buildx-action", "docker/build-push-action", "google-github-actions/deploy-appengine", "azure/webapps-deploy", "aws-actions/configure-aws-credentials", "aws-actions/aws-cloudformation-github-deploy", "appleboy/ssh-action", "slackapi/slack-github-action", "actions/github-script", "actions/labeler", "actions/stale", "actions/create-release", "softprops/action-gh-release", "dephraiim/translate-readme"]'


jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm install axios

      # Ëé∑Âèñ GITHUB_OWNER ÊúâÂì™‰∫õ‰ªìÂ∫ì‰ª•ÂèäÊúÄÊñ∞ÁöÑ‰ø°ÊÅØ
      - name: Run script to generate JSON
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const axios = require("axios");

            const GITHUB_REPOS = JSON.parse(process.env.GITHUB_REPOS);

            const headers = {
                Accept: "application/vnd.github.v3+json",
            };

            const fetchApi = async (url) => {
              const response = await axios.get(url, { headers });
              const rateLimit = response.headers["x-ratelimit-limit"];
              const rateLimitRemaining = response.headers["x-ratelimit-remaining"];
              const rateLimitReset = response.headers["x-ratelimit-reset"];

              console.log(`üîÑ Rate limit remaining: ${rateLimitRemaining}/${rateLimit}`);

              if (response.status === 403 || response.status === 429) {
                  const resetTime = new Date(rateLimitReset * 1000).toLocaleTimeString();
                  console.log(`‚è≥ Rate limit exceeded, waiting until ${resetTime}...`);
                  await new Promise((resolve) =>
                      setTimeout(resolve, rateLimitReset * 1000 - Date.now())
                  );
                  return await fetchApi(url);
              }

              if (response.status !== 200) {
                  throw new Error(`‚ùå Failed to fetch data: ${response.status}`);
              }

              return response.data;
            };

            async function fetchLatestTag(git_repo) {
                try {
                    const url = `https://api.github.com/repos/${git_repo}`;
                    console.log(`üì° Fetching data from ${url}...`);
                    const repoData = await fetchApi(url);

                    const description = repoData.description;
                    const archived = repoData.archived;
                    const docsUrl = repoData.html_url;

                    // ËØ∑Ê±Çreleases
                    const releasesUrl = repoData.releases_url.replace("{/id}", "");
                    const releasesResponse = await fetchApi(releasesUrl);

                    // Ê£ÄÊü•ÊòØÂê¶Êúâreleases
                    if (releasesResponse.length === 0) {
                        console.log(`‚ö†Ô∏è No releases found for ${git_repo}`);
                        return {
                            latest: "N/A",
                            major: "N/A",
                            status: archived ? "deprecated" : "active",
                            description: description,
                            releaseDate: "N/A",
                            changelog: "N/A",
                            docsUrl: docsUrl,
                        };
                    }

                    // Ëé∑ÂèñÊúÄÊñ∞ÁöÑrelease‰ø°ÊÅØ
                    const latestRelease = releasesResponse[0];
                    const latestTag = latestRelease.tag_name;
                    const releaseDate = latestRelease.published_at;
                    const changelog = latestRelease.body || "No changelog provided";

                    console.log(`‚úÖ Latest tag for ${git_repo}: ${latestTag}`);

                    return {
                        latest: latestTag,
                        major: parseTag(latestTag),
                        status: archived ? "deprecated" : "active",
                        description: description,
                        releaseDate: releaseDate,
                        changelog: changelog,
                        docsUrl: docsUrl,
                    };
                } catch (error) {
                    console.error(`‚ùå Error fetching ${git_repo}:`, error.message);
                    return {
                        latest: "Error",
                        major: "Error",
                        status: "Error",
                        description: "Error",
                        releaseDate: "Error",
                        changelog: "Error",
                        docsUrl: "Error",
                    };
                }
            }

            function parseTag(tag) {
                return tag.replace(/^v/, "").split(".")[0];
            }

            (async () => {
                try {
                    const repos = GITHUB_REPOS;
                    const data = {
                        actions: [],
                        updated: new Date().toISOString(),
                    };

                    for (const repo of repos) {
                        console.log(`üîç Processing repository: ${repo}`);
                        const result = await fetchLatestTag(repo);
                        data.actions.push({
                            repo,
                            latest: result.latest,
                            major: result.major,
                            description: result.description,
                            status: result.status,
                            releaseDate: result.releaseDate,
                            changelog: result.changelog,
                            docsUrl: result.docsUrl,
                        });
                    }

                    fs.writeFileSync(process.env.JSON_FILE_PATH, JSON.stringify(data, null, 2));
                    console.log(`üìÑ JSON file generated: ${process.env.JSON_FILE_PATH}`);
                } catch (error) {
                    console.error("‚ùå Error:", error.message);
                    process.exit(1);
                }
            })();
      
      - name: Update JSON file
        uses: actions/github-script@v6
        with:
          script: |
            const {buildData, processDataUpdate} = require('.github/utils/json.js');

            const json_path = process.env.JSON_FILE_PATH.replace(`${process.env.GITHUB_WORKSPACE}/`, '');

            const data = buildData({
              name: process.env.DATA_CENTER_NAME,
              description: 'Github Actions Versions',
              description_zh: 'GitHub Actions Runner Êìç‰ΩúÁ≥ªÁªüÁâàÊú¨',
              path: [json_path]
            });

            processDataUpdate(process.env.DATA_CENTER_FILE, data)
            console.log(`JSON Êñá‰ª∂Â∑≤Êõ¥Êñ∞Ôºö${process.env.DATA_CENTER_FILE}`);

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ${{ env.JSON_FILE_PATH }}
          git commit -m "Auto-generated JSON file [skip ci]"
          git add ${{ env.DATA_CENTER_FILE }}
          git commit -m "Update data center file [skip ci]"
          git push